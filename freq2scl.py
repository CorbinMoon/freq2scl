import numpy as np
import matplotlib.pyplot as plt


d = 0.24
s_1 = 0.021
s_2 = 19
_a = -3.5
_b = -5.75


class Freq2Scl(object):

    def __init__(self):
        self.__data = None
        self.__alpharange = None

    @classmethod
    def __dis(cls, f, amp):
        """

        :param f: vector of frequencies
        :param amp: vector of amplitudes
        :return: sensory dissonance btw. two tones
        """
        idx = np.argsort(f)
        s_amp = np.asarray(amp)[idx]
        s_f = np.asarray(f)[idx]
        idx = np.transpose(np.triu_indices(len(s_f), 1))

        f_pairs = s_f[idx]
        amp_pairs = s_amp[idx]

        f_min = f_pairs[:, 0]
        s = d / (s_1 * f_min + s_2)
        x = s * (f_pairs[:, 1] - f_pairs[:, 0])

        v = np.prod(amp_pairs, axis=1)

        return np.sum(v * (np.exp(_a * x) - np.exp(_b * x)))

    def __find_min(self):
        min_idx = np.where((self.__data[1:-1] < self.__data[0:-2])
                           * (self.__data[1:-1] < self.__data[2:]))[0]
        x = np.linspace(1, self.__alpharange, len(self.__data))
        return x[min_idx]

    @property
    def get_data(self):
        return self.__data

    def calc_dis(self, f, amp, n=2000, alpharange=2.1):
        """

        :param f: vector of frequencies
        :param amp: vector of amplitudes
        :param n: number of samples
        :param alpharange: alpha range across x-axis
        """
        if alpharange <= 1:
            raise Exception("alpharange must be greater than one")

        data = np.zeros(n, dtype=np.float)
        a = np.concatenate((amp, amp))

        for i, alpha in enumerate(np.linspace(1, alpharange, n)):
            freq = np.concatenate((f, alpha * f))
            data[i] = self.__dis(freq, a)

        self.__data = data
        self.__alpharange = alpharange

    def plot(self):
        x = np.linspace(1, self.__alpharange, len(self.__data))
        plt.plot(x, self.__data)
        plt.xlim(1, self.__alpharange)
        plt.xlabel('freq ratio')
        plt.ylabel('sensory dissonance')
        plt.show()

    def write_to_scl(self, path):
        """

        :param path: path of generated scala scale file
        """
        ratios = self.__find_min()
        cents = 1200 * np.log(ratios) / np.log(2)
        delim = '\\' if '\\' in path else '/'

        with open(path, 'w+', encoding='UTF-8') as scl:
            scl.write("! %s\n!\n" % path.split(delim)[-1])
            scl.write("scale generated by freq2scl\n")
            scl.write("%d\n!\n" % (len(cents)))

            for cent in cents:
                scl.write("%0.2f\n" % cent)
